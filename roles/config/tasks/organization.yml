---
# ------
# Tenant Groups: https://docs.ansible.com/ansible/latest/collections/netbox/netbox/netbox_tenant_group_module.html
- name: "NBConfig.Tenancy - Manage tenancy:tenant_groups"
  become: false
  loop: "{{ config_tenancy_groups }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - config_tenancy_groups is defined
  netbox.netbox.netbox_tenant_group:
    netbox_url: "{{ config_netbox_api }}"
    netbox_token: "{{ config_netbox_api_key }}"
    validate_certs: "{{ config_netbox_validcert }}"
    data:
      name: "{{ item.name }}"  # Required
      slug: "{{ item.slug }}"  # Required
      description: "{{ item.description | default(omit) }}"  # Optional
      parent_tenant_group: "{{ item.parent | default(omit) }}"  # Optional
      tags: "{{ (item.tags | default([])) + (config_tags_base | default([])) }}"  # Optional
      custom_fields: "{{ item.custom_fields | default(omit) }}"  # Optional - must be pre-defined
    state: "{{ item.state | default('present') }}"  # Optional

# ------
# Tenants: https://docs.ansible.com/ansible/latest/collections/netbox/netbox/netbox_tenant_module.html
- name: "NBConfig.Tenancy - Manage tenancy:tenants"
  become: false
  loop: "{{ config_tenancy_tenants }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - config_tenancy_tenants is defined
  netbox.netbox.netbox_tenant:
    netbox_url: "{{ config_netbox_api }}"
    netbox_token: "{{ config_netbox_api_key }}"
    validate_certs: "{{ config_netbox_validcert }}"
    data:
      name: "{{ item.name }}"  # Required
      slug: "{{ item.slug }}"  # Required
      tenant_group: "{{ item.tenant_group | default(omit) }}"  # Optional
      description: "{{ item.description | default(omit) }}"  # Optional
      comments: "{{ item.comments | default(omit) }}"  # Optional
      tags: "{{ (item.tags | default([])) + (config_tags_base | default([])) }}"  # Optional
      custom_fields: "{{ item.custom_fields | default(omit) }}"  # Optional - must be pre-defined
    state: "{{ item.state | default('present') }}"  # Optional

# ------
# Contact Roles: https://docs.ansible.com/ansible/latest/collections/netbox/netbox/netbox_contact_role_module.html
- name: "NBConfig.Tenancy - Manage tenancy:contact-roles"
  become: false
  loop: "{{ config_tenancy_contact_roles }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - config_tenancy_contact_roles is defined
  netbox.netbox.netbox_contact_role:
    netbox_url: "{{ config_netbox_api }}"
    netbox_token: "{{ config_netbox_api_key }}"
    validate_certs: "{{ config_netbox_validcert }}"
    data:
      name: "{{ item.name }}"  # Required
      slug: "{{ item.slug }}"  # Required
      description: "{{ item.description | default(omit) }}"  # Optional
      tags: "{{ (item.tags | default([])) + (config_tags_base | default([])) }}"  # Optional
      custom_fields: "{{ item.custom_fields | default(omit) }}"  # Optional - must be pre-defined
    state: "{{ item.state | default('present') }}"  # Optional

# ------
# Contact Groups: https://docs.ansible.com/ansible/latest/collections/netbox/netbox/netbox_contact_group_module.html
- name: "NBConfig.Tenancy - Manage tenancy:contact_groups"
  become: false
  loop: "{{ config_tenancy_contact_groups }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - config_tenancy_contact_groups is defined
  netbox.netbox.netbox_contact_group:
    netbox_url: "{{ config_netbox_api }}"
    netbox_token: "{{ config_netbox_api_key }}"
    validate_certs: "{{ config_netbox_validcert }}"
    data:
      name: "{{ item.name }}"  # Required
      slug: "{{ item.slug }}"  # Required
      parent_contact_group: "{{ item.parent_contact_group | default(omit) }}"  # Optional
      tags: "{{ (item.tags | default([])) + (config_tags_base | default([])) }}"  # Optional
      custom_fields: "{{ item.custom_fields | default(omit) }}"  # Optional - must be pre-defined
    state: "{{ item.state | default('present') }}"  # Optional

# ------
# Contacts: https://docs.ansible.com/ansible/latest/collections/netbox/netbox/netbox_contact_module.html
- name: "NBConfig.Tenancy - Manage tenancy:contacts (v3)"  # Module is currently broken as of 3.21.0
  become: false
  loop: "{{ config_tenancy_contacts }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - config_netbox_version is version(3, '==')
    - config_tenancy_contacts is defined
  netbox.netbox.netbox_contact:
    netbox_url: "{{ config_netbox_api }}"
    netbox_token: "{{ config_netbox_api_key }}"
    validate_certs: "{{ config_netbox_validcert }}"
    data:
      name: "{{ item.name }}"  # Required
      title: "{{ item.title }}"  # Required
      email: "{{ item.email }}"  # Required  - Currently broken
      phone: "{{ item.phone | default(omit) }}"  # Optional
      address: "{{ item.address | default(omit) }}"  # Optional
      link: "{{ item.link | default(omit) }}"  # Optional
      contact_group: "{{ item.contact_group | default(omit) }}"  # Optional - must be defined in config_tenancy_contact_groups
      tags: "{{ (item.tags | default([])) + (config_tags_base | default([])) }}"  # Optional
      custom_fields: "{{ item.custom_fields | default(omit) }}"  # Optional - must be pre-defined
    state: "{{ item.state | default('present') }}"  # Optional

# ------
# Regions Management:  https://docs.ansible.com/ansible/latest/collections/netbox/netbox/netbox_region_module.html

- name: "NBConfig.DCIM - Manage dcim:regions"
  become: false
  loop: "{{ config_dcim_regions }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - config_dcim_regions is defined
  netbox.netbox.netbox_region:
    netbox_url: "{{ config_netbox_api }}"
    netbox_token: "{{ config_netbox_api_key }}"
    validate_certs: "{{ config_netbox_validcert }}"
    data:
      name: "{{ item.name }}"  # Required
      slug: "{{ item.slug }}"  # Required
      description: "{{ item.description | default(omit) }}"  # Optional
      parent_region: "{{ item.parent_region | default(omit) }}"  # Optional
      tags: "{{ (item.tags | default([])) + (config_tags_base | default([])) }}"  # Optional
      custom_fields: "{{ item.custom_fields | default(omit) }}"  # Optional - must be pre-defined
    state: "{{ item.state | default('present') }}"  # Optional

# ------
# Site Groups: https://docs.ansible.com/ansible/latest/collections/netbox/netbox/netbox_site_group_module.html
- name: "NBConfig.DCIM - Manage dcim:site_groups"
  become: false
  loop: "{{ config_dcim_site_groups }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - config_dcim_site_groups is defined
  netbox.netbox.netbox_site_group:
    netbox_url: "{{ config_netbox_api }}"
    netbox_token: "{{ config_netbox_api_key }}"
    validate_certs: "{{ config_netbox_validcert }}"
    data:
      name: "{{ item.name }}"  # Required
      slug: "{{ item.slug }}"  # Required
      description: "{{ item.description | default(omit) }}"  # Optional
      parent_site_group: "{{ item.parent_site_group | default(omit) }}"  # Optional
      tags: "{{ (item.tags | default([])) + (config_tags_base | default([])) }}"  # Optional
      custom_fields: "{{ item.custom_fields | default(omit) }}"  # Optional - must be pre-defined
    state: "{{ item.state | default('present') }}"  # Optional


# ------
# Sites: https://docs.ansible.com/ansible/latest/collections/netbox/netbox/netbox_site_module.html
- name: "NBConfig.DCIM - Manage dcim:sites"
  become: false
  loop: "{{ config_dcim_sites }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - config_dcim_sites is defined
  netbox.netbox.netbox_site:
    netbox_url: "{{ config_netbox_api }}"
    netbox_token: "{{ config_netbox_api_key }}"
    validate_certs: "{{ config_netbox_validcert }}"
    data:
      name: "{{ item.name }}"  # Required
      slug: "{{ item.slug }}"  # Required
      status: "{{ item.status | default('active') | lower }}"  # Required - planned | staging | active | decomissioning | retired
      description: "{{ item.description | default(omit) }}"  # Optional
      region: "{{ item.region | default(omit) }}"  # Optional - Must be defined in config_dcim_regions
      site_group: "{{ item.site_group | default(omit) }}"  # Optional - Must be defined in config_dcim_site_groups
      tenant: "{{ item.tenant | default(omit) }}"  # Optional - Must be defined in Tenant
      facility: "{{ item.facility | default(omit) }}"  # Optional
      # asn: "{{ item.asn | default(omit) }}"  # Optional
      time_zone: "{{ item.time_zone | default(omit) }}"  # Optional - Must be an official time zone designation
      physical_address: "{{ item.physical_address | default(omit) }}"  # Optional
      shipping_address: "{{ item.shipping_address | default(omit) }}"  # Optional
      latitude: "{{ item.latitude | default(omit) }}"  # Optional
      longitude: "{{ item.longitude | default(omit) }}"  # Optional
      # contact_name: Jenny
      # contact_phone: 867-5309
      # contact_email: jenny@changednumber.com
      comments: "{{ item.comments | default(omit) }}"  # Optional
      tags: "{{ (item.tags | default([])) + (config_tags_base | default([])) }}"  # Optional
      custom_fields: "{{ item.custom_fields | default(omit) }}"  # Optional - must be pre-defined
    state: "{{ item.state | default('present') }}"  # Optional

# ------
# Locations: https://docs.ansible.com/ansible/latest/collections/netbox/netbox/netbox_location_module.html
- name: "NBConfig.DCIM - Manage dcim:locations"
  become: false
  loop: "{{ config_dcim_locations }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - config_dcim_locations is defined
  netbox.netbox.netbox_location:
    netbox_url: "{{ config_netbox_api }}"
    netbox_token: "{{ config_netbox_api_key }}"
    validate_certs: "{{ config_netbox_validcert }}"
    data:
      name: "{{ item.name }}"  # Required
      slug: "{{ item.slug }}"  # Required
      status: "{{ item.status | default('active') | lower }}"  # Required - planned | staging | active | decomissioning | retired
      parent_location: "{{ item.parent_location | default(omit) }}"  # Optional - Must be previously defined in this task
      facility: "{{ item.facility | default(omit) }}"  # Optional
      tenant: "{{ item.tenant | default(omit) }}"  # Optional
      description: "{{ item.description | default(omit) }}"  # Optional
      tags: "{{ (item.tags | default([])) + (config_tags_base | default([])) }}"  # Optional
      custom_fields: "{{ item.custom_fields | default(omit) }}"  # Optional - must be pre-defined
    state: "{{ item.state | default('present') }}"  # Optional
